#########################
# My Personal Functions #
#########################

# Restart terminal clean
function res() {
    clear && ls -a
}

# Open series of work URLs
function work() {
	open "http://info.chesapeake.edu/librarystats/reference/"
	open "https://libraryh3lp.com/webchat/"
	open "https://drive.google.com/#activity"
	open "https://www.rememberthemilk.com/home/phette23/"
}

# Print cheat sheet of dotfiles functions/aliases
function cheat() {
	echo -e "$ORANGE c \t\t\t$RESET- trim new lines & copy to clipboard"
	echo -e "$ORANGE dataurl \t\t$RESET- make data URL from file"
	echo -e "$ORANGE emptytrash \t\t$RESET- empties the trash"
	echo -e "$ORANGE fs \t\t\t$RESET- get file size"
	echo -e "$ORANGE gurl \t\t\t$RESET- Gzip-enabled curl"
	echo -e "$ORANGE (hide|show)desktop \t$RESET- hide or show Desktop icons"
	echo -e "$ORANGE httpcompression \t$RESET- test if URL uses Gzip"
	echo -e "$ORANGE ip \t\t\t$RESET- echo external IP"
	echo -e "$ORANGE localip \t\t$RESET- echo internal IP"
	echo -e "$ORANGE lsa \t\t\t$RESET- list all files in short format"
	echo -e "$ORANGE lsd \t\t\t$RESET- list directories only"
	echo -e "$ORANGE note \t\t\t$RESET- add string as new to Notes app"
	echo -e "$ORANGE mkd \t\t\t$RESET- make directory & enter it"
	echo -e "$ORANGE o \t\t\t$RESET- alias for open"
	echo -e "$ORANGE oo \t\t\t$RESET- open current directory"
	echo -e "$ORANGE phpserver X \t\t$RESET- open PHP server in . on port X"
	echo -e "$ORANGE remind \t\t$RESET- add string as new in Reminders app"
	echo -e "$ORANGE server X \t\t$RESET- open a server in . on port X"
	echo -e "$ORANGE spot(off|on) \t\t$RESET- turn Spotlight off & on"
	echo -e "$ORANGE urlencode \t\t$RESET- URL encode string"
	echo -e "$ORANGE v \t\t\t$RESET- alias for vim"
}

####################
# End My Functions #
####################

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en0)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# Get gzipped file size
function gz() {
	echo "orig size (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}
